[{"C:\\Users\\harsh\\Desktop\\Code\\Job-Portal\\client\\src\\index.js":"1","C:\\Users\\harsh\\Desktop\\Code\\Job-Portal\\client\\src\\App.js":"2","C:\\Users\\harsh\\Desktop\\Code\\Job-Portal\\client\\src\\reportWebVitals.js":"3","C:\\Users\\harsh\\Desktop\\Code\\Job-Portal\\client\\src\\components\\Jobs.js":"4","C:\\Users\\harsh\\Desktop\\Code\\Job-Portal\\client\\src\\components\\Job.js":"5","C:\\Users\\harsh\\Desktop\\Code\\Job-Portal\\client\\src\\components\\JobModal.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":752,"mtime":1610917548975,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":2796,"mtime":1611099764104,"results":"11","hashOfConfig":"8"},{"size":798,"mtime":1611099676115,"results":"12","hashOfConfig":"8"},{"size":1816,"mtime":1611101513641,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"103mn34",{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"16"},"C:\\Users\\harsh\\Desktop\\Code\\Job-Portal\\client\\src\\index.js",[],["32","33"],"C:\\Users\\harsh\\Desktop\\Code\\Job-Portal\\client\\src\\App.js",["34","35"],"import fetch from 'node-fetch';\nimport './App.css';\nimport Jobs from './components/Jobs';\nimport React from 'react'\nimport Paper from '@material-ui/core/Paper';\nconst JOB_API_URL = \"http://localhost:3001/jobs\"\n\nconst mockJobs = [\n  {title: 'SWE-1', company: 'Google'},\n  {title: 'SWE-1', company: 'Google'}\n]\n\nasync function fetchJobs(updateCb) {\n  const res = await fetch(JOB_API_URL)\n  const json = await res.json(); \n  \n  updateCb(json)\n  console.log({json})\n}\n\n\nfunction App() {\n  \n  const [jobList, updateJobs] = React.useState([])\n\n  //similar to componentdidmount\n  React.useEffect(\n    () => {\n        fetchJobs(updateJobs);\n    }, [])\n\n  return (\n    <div className=\"App\">\n      <Jobs jobs = {jobList}/>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\harsh\\Desktop\\Code\\Job-Portal\\client\\src\\reportWebVitals.js",[],"C:\\Users\\harsh\\Desktop\\Code\\Job-Portal\\client\\src\\components\\Jobs.js",["36","37"],"import { Typography } from '@material-ui/core';\r\nimport React from 'react'\r\n// import Typography from '@material-ui/core/Typography';\r\nimport MobileStepper from '@material-ui/core/MobileStepper';\r\nimport Button from '@material-ui/core/Button';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Job from './Job';\r\nimport JobModal from './JobModal'\r\n\r\nexport default function Jobs({jobs}){\r\n    const numJobs = jobs.length\r\n    const numPages = Math.ceil(numJobs / 30) \r\n    const useStyles = makeStyles({\r\n        root: {\r\n          maxWidth: 400,\r\n          flexGrow: 1,\r\n        },\r\n    });\r\n      \r\n    //modal\r\n    const [open, setOpen] = React.useState(false);\r\n    const [selectedJob, selectJob]  = React.useState({});\r\n\r\n    const handleClickOpen = () => {\r\n      setOpen(true);\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      setOpen(false);\r\n    };\r\n  \r\n    const classes = useStyles();\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n \r\n    const jobsOnPage = jobs.slice(activeStep * 30, (activeStep * 30) + 30)\r\n\r\n    //no of jops per page = 50\r\n\r\n    const handleNext = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n      };\r\n    \r\n      const handleBack = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n      };\r\n\r\n    return(\r\n        <div>\r\n        <JobModal open = {open}  job = {selectedJob} handleClose = {handleClose}/>    \r\n        <h1 className = \"head\">Entry level software jobs</h1>\r\n        <h4 className = \"subhead\">Found {numJobs} Jobs</h4>\r\n        {\r\n           jobsOnPage.map(\r\n                (job, i) => <Job key = {i} job = {job} onClick = {() => {\r\n                    handleClickOpen();\r\n                    selectJob(job)}}/>\r\n            )\r\n        }\r\n         \r\n        <div style = {{textAlign: 'center'}}>\r\n            Page {activeStep + 1} of {numPages}\r\n        </div>\r\n        <div class = \"step-align\">\r\n         <MobileStepper    \r\n            variant=\"progress\"\r\n            steps={Math.ceil(numJobs / 30)}\r\n            position=\"static\"\r\n            activeStep={activeStep}\r\n            className={classes.root}\r\n            nextButton={\r\n            <Button size=\"small\" onClick={handleNext} disabled={activeStep === 5}>\r\n                Next\r\n                <KeyboardArrowRight />\r\n            </Button>\r\n            }\r\n            backButton={\r\n            <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\r\n                <KeyboardArrowLeft />\r\n                Back\r\n            </Button>\r\n            }\r\n        />\r\n        </div>\r\n          \r\n        </div>  \r\n         \r\n        )\r\n}","C:\\Users\\harsh\\Desktop\\Code\\Job-Portal\\client\\src\\components\\Job.js",["38"],"import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nexport default function Job({job, onClick}){\r\n    return(\r\n        <div>\r\n        <Paper onClick = {onClick} className = {'job'}   elevation = {3} >\r\n          \r\n                <div className = \"res\">\r\n                        <div className = \"header\">{job.title}</div>\r\n                        <div className = \"comp\">{job.company}</div> \r\n                        <div className = \"top\">{job.location}</div>\r\n                </div> \r\n                <div className = \"res2\">\r\n                        <div>{job.created_at.split(' ').slice(0, 4).join(' ')}</div> \r\n                </div> \r\n       \r\n        </Paper> \r\n        <br/>\r\n        </div>\r\n       \r\n    )\r\n}",["39","40"],"C:\\Users\\harsh\\Desktop\\Code\\Job-Portal\\client\\src\\components\\JobModal.js",["41","42"],"import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n  });\r\n\r\nexport default function JobModal({job, open, handleClose}){\r\n    if(!job.title){\r\n        return <div></div>\r\n    }\r\n    return (\r\n      <div>\r\n        <Dialog\r\n          open={open}\r\n          TransitionComponent={Transition}\r\n          keepMounted\r\n          onClose={handleClose}\r\n          aria-labelledby=\"alert-dialog-slide-title\"\r\n          aria-describedby=\"alert-dialog-slide-description\"\r\n        >\r\n          <DialogTitle id=\"alert-dialog-slide-title\">\r\n              {job.title} - {job.company}\r\n              <img className = {'details'} src = {job.company_logo} />\r\n              </DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-slide-description\">\r\n                <div dangerouslySetInnerHTML = {{ __html: job.description }} />\r\n            </DialogContentText>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleClose} color=\"primary\">\r\n              Close\r\n            </Button>\r\n            <a href = {job.url} target = \"_blank\">\r\n                <Button onClick={handleClose} color=\"primary\">\r\n                    Apply\r\n                </Button>\r\n            </a>\r\n           \r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    );\r\n}",{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":5,"column":8,"nodeType":"49","messageId":"50","endLine":5,"endColumn":13},{"ruleId":"47","severity":1,"message":"51","line":8,"column":7,"nodeType":"49","messageId":"50","endLine":8,"endColumn":15},{"ruleId":"47","severity":1,"message":"52","line":1,"column":10,"nodeType":"49","messageId":"50","endLine":1,"endColumn":20},{"ruleId":"47","severity":1,"message":"53","line":8,"column":22,"nodeType":"49","messageId":"50","endLine":8,"endColumn":30},{"ruleId":"47","severity":1,"message":"52","line":2,"column":8,"nodeType":"49","messageId":"50","endLine":2,"endColumn":18},{"ruleId":"43","replacedBy":"54"},{"ruleId":"45","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":31,"column":15,"nodeType":"58","endLine":31,"endColumn":71},{"ruleId":"59","severity":1,"message":"60","line":42,"column":13,"nodeType":"58","endLine":42,"endColumn":51},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'Paper' is defined but never used.","Identifier","unusedVar","'mockJobs' is assigned a value but never used.","'Typography' is defined but never used.","'useTheme' is defined but never used.",["61"],["62"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","no-global-assign","no-unsafe-negation"]